# Base ngnix web server
nginx:
  enabled: true
  chart: "bitnami/nginx"
  service:
    type: ClusterIP
  podSecurityContext:
    enabled: false
  containerSecurityContext:
    enabled: false
  networkPolicy:
    enabled: false
  ingress:
    enabled: true
    annotations:
      aviinfrasetting.ako.vmware.com/name: "dataclass-medium"
    hostname: nginx-{{cookiecutter.licence_plate}}-test.apps.emerald.devops.gov.bc.ca
  version: "{{ cookiecutter.nginx_version }}"
  image:
    pullPolicy: Always
  podLabels:
    environment: test
    env: test
    owner: "{{cookiecutter.team_name}}"
    project: "{{cookiecutter.project_name}}"
    DataClass: "Medium"
  commonLabels:
    environment: test
    env: test
    owner: "{{cookiecutter.team_name}}"
    project: "{{cookiecutter.project_name}}"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "{{cookiecutter.project_name}}"
  replicaCount: 1
  resources:
    limits:
      cpu: 50m
      memory: 256Mi
    requests:
      memory: 100Mi
      cpu: 20m

# Normal Postgres DB instance
postgresql:
  enabled: false
  image:
    pullPolicy: Always
  commonLabels:
    environment: test
    env: test
    owner: "{{cookiecutter.team_name}}"
    project: "{{cookiecutter.project_name}}"
    DataClass: "Medium"
  primary:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
    networkPolicy:
      enabled: false
    labels:
      environment: test
      env: test
      owner: "{{cookiecutter.team_name}}"
      project: "{{cookiecutter.project_name}}"
      DataClass: "Medium"
    podLabels:
      environment: test
      env: test
      owner: "{{cookiecutter.team_name}}"
      project: "{{cookiecutter.project_name}}"
      DataClass: "Medium"
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        memory: 256Mi
        cpu: 100m

#  this will create postgres database with HA and
postgresql-ha:
  enabled: true
  backup:
    enabled: true
    image:
      pullPolicy: Always
    cronjob:
      containerSecurityContext:
        enabled: false
      podSecurityContext:
        enabled: false
      schedule: "*/5 * * * *"
      resources:
        limits:
          cpu: 50m
          memory: 256Mi
        requests:
          memory: 100Mi
          cpu: 20m
      storage:
        size: 256Mi

  postgresql:
    image:
      pullPolicy: Always
    podSecurityContext:
      enabled: false
    persistence:
      size: 256Mi
    replicaCount: 2
    containerSecurityContext:
      enabled: false
    resources:
      limits:
        cpu: 200m
        memory: 1Gi
      requests:
        memory: 256Mi
        cpu: 100m
  pgdumpall:
    podSecurityContext:
      enabled: false
    persistence:
      size: 256Mi
    containerSecurityContext:
      enabled: false
    resources:
      limits:
        cpu: 50m
        memory: 1Gi
      requests:
        memory: 256Mi
        cpu: 20m

  pgpool:
    containerSecurityContext:
      enabled: false
    image:
      pullPolicy: Always
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        memory: 100Mi
        cpu: 20m

  commonLabels:
    environment: test
    env: test
    owner: "{{cookiecutter.team_name}}"
    project: "{{cookiecutter.project_name}}"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "{{cookiecutter.project_name}}"

telnet:
  enabled: true
  commonLabels:
    environment: test
    env: test
    owner: "{{cookiecutter.team_name}}"
    project: "{{cookiecutter.project_name}}"
    DataClass: "Medium"
    app.kubernetes.io/part-of: "{{cookiecutter.project_name}}"
